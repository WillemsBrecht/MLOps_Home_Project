# This is a basic workflow to help you get started with Actions

name: mlops_runner

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  #pull_request:
  #  branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Train_and_register_AI_model:
    # The type of runner that the job will run on
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: 'Set up python'
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      
      - name: "install requirements"
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          
      - name: "Azure login"  
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Run data prep script'
        env:
          ENV_AZURE: ${{ secrets.ENV_AZURE }}
          ENV_GENERAL : ${{ secrets.ENV_GENERAL }}
          ENV_DATA : ${{ secrets.ENV_DATA }}
        run: |
          python3 steps/01_DataPreparing.py
          
      - name: 'Run Training script'
        env:
          ENV_AZURE : ${{ secrets.ENV_AZURE }}
          ENV_GENERAL : ${{ secrets.ENV_GENERAL }}
          ENV_DATA : ${{ secrets.ENV_DATA }}
          ENV_MODEL : ${{ secrets.ENV_MODEL }}
          ENV_CLUSTER : ${{ secrets.ENV_CLUSTER }}
        run: |
          python3  steps/02_Training.py
          
      - name: 'Register & download model'
        env:
          ENV_AZURE : ${{ secrets.ENV_AZURE }}
          ENV_GENERAL : ${{ secrets.ENV_GENERAL }}
          ENV_MODEL : ${{ secrets.ENV_MODEL }}
          ENV_REGISTER : ${{ secrets.ENV_REGISTER }}
        run: |
          python3  steps/03_RegisterModel.py
      
      - name: "Save config data"
        uses: actions/upload-artifact@v2.2.3
        with:
          name: config-data
          path: tmp
          retention-days: 10
          
  Build_Fast_API_image:
    # needs will wait until the specified jobs has succeeded
    needs: Train_and_register_AI_model
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v2
         
      - name: Create the needed directories for the fast-api image
        working-directory: api/api/app
        run: |
          mkdir images

      - name: Set PAT secret
        run: |
          echo ${{ secrets.PAT }} | docker login ghcr.io --username WillemsBrecht --password-stdin

      - name: Build Dockerfile & Push Dockerfile to github
        working-directory: api/api
        run: |
          docker build -t ghcr.io/willemsbrecht/lungsfastapi:${{ secrets.IMAGE_VERSION }} .
          docker push ghcr.io/willemsbrecht/lungsfastapi:${{ secrets.IMAGE_VERSION }}
          
  Deploy_to_cluster:
    needs: Build_Fast_API_image
    runs-on: self-hosted
    
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Update kubernetes deployments
        working-directory: charts
        run: |
          helm upgrade --install fastapi-lungs -n mlops-group-8 ./fastapi-lungs

      - name: Test port-forward fastapi connection
        working-directory: charts
        run: |
          kubectl port-forward service/fastapi-lungs-svc 8701:80 -n mlops-group-8 &
          sleep 2
          curl localhost:8701

